
<div class="@CardClass" draggable="@this.Draggable.ToString()" @ondragstart="@(() => this.Parent.OnDragStart(this.CardModel))"
     ondragover="event.preventDefault();" @ondrop="@(async () => { Console.WriteLine($"Handling from card {this.CardModel.Rank}"); await this.Parent.HandleDrop(); })"
     @ondrag="@this.OnDrag" @ondblclick="@this.OnDoubleClick">

    <img src=@ImageHelper.GetCardImage(this.CardModel.Visible, this.CardModel.Suit, this.CardModel.Rank) class="card-image ">
    @*@this.CardContent*@

    @*<div class="@this.DivClass">
        @if (this.CardModel.Visible)
        {
            <img src="./img/10C.png" class="card-img">
            @this.CardContent
        }
        else
        {

            <img class="card-face" alt="Example image" src="svg\card-back.svg" />
        }
    </div>*@
</div>

@code {
    [Parameter] public CardModel CardModel { get; set; }
    [Parameter] public DeckBase Parent { get; set; }
    [Parameter] public bool Draggable { get; set; }
    [Parameter] public bool Droppable { get; set; }

    public string CardClass => this.CardModel.Visible ? "card" : "card-hidden";

    public string CardContent => $"{this.CardModel.Rank} of {this.CardModel.Suit}";

    public string DivClass => $"{(this.CardModel.Color == Colors.Black ? "black" : "red")} {(this.CardModel.Visible ? "" : "hidden")}";

    public void OnDrag(DragEventArgs args)
    {

    }

    public void OnDoubleClick(MouseEventArgs mouseEventArgs)
    {
        Console.WriteLine("Double clicked");
    }
}
